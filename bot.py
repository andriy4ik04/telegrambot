
import telebot
from telebot import types
import json
import os
import time
from dotenv import load_dotenv

load_dotenv()
TOKEN = os.getenv("TELEGRAM_TOKEN")
CHANNEL_ID = -1002612055353
ADMIN_ID = 470240474

bot = telebot.TeleBot(TOKEN)

waiting_for_message = {}
pending_messages = {}

FILTER_FILE = 'filter_words.json'
if os.path.exists(FILTER_FILE):
    with open(FILTER_FILE, 'r', encoding='utf-8') as f:
        filter_words = json.load(f)
else:
    filter_words = []

@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("üìù –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è")
    markup.row("‚ÑπÔ∏è –ü—Ä–æ –º–µ–Ω–µ", "üìÑ –î–æ–ø–æ–º–æ–≥–∞")
    markup.row("‚òï –î–æ–Ω–∞—Ç", "‚ùå –í–∏–π—Ç–∏")
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤—ñ—Ç! –û–±–µ—Ä–∏ –¥—ñ—é –∑ –º–µ–Ω—é –Ω–∏–∂—á–µ:", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text in ["‚ÑπÔ∏è –ü—Ä–æ –º–µ–Ω–µ", "üìÑ –î–æ–ø–æ–º–æ–≥–∞", "‚òï –î–æ–Ω–∞—Ç", "‚ùå –í–∏–π—Ç–∏"])
def handle_menu_buttons(message):
    if message.text == "‚ÑπÔ∏è –ü—Ä–æ –º–µ–Ω–µ":
        bot.send_message(message.chat.id, "–Ø –±–æ—Ç, —â–æ –ø–µ—Ä–µ–¥–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó –≤ –∫–∞–Ω–∞–ª –Ω–æ–≤–∏–Ω Ctrl.Tap")
    elif message.text == "üìÑ –î–æ–ø–æ–º–æ–≥–∞":
        bot.send_message(message.chat.id, "–ù–∞—Ç–∏—Å–Ω–∏ 'üìù –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è', –Ω–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç ‚Äî —ñ —è –ø–µ—Ä–µ–¥–∞–º –π–æ–≥–æ –∞–¥–º—ñ–Ω—É")
    elif message.text == "‚òï –î–æ–Ω–∞—Ç":
        bot.send_message(message.chat.id, "–ü—ñ–¥—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–æ—î–∫—Ç: Ctrl.Tap https://send.monobank.ua/jar/7F8qg5rR9c")
    elif message.text == "‚ùå –í–∏–π—Ç–∏":
        markup = types.ReplyKeyboardRemove()
        bot.send_message(message.chat.id, "–ú–µ–Ω—é –ø—Ä–∏—Ö–æ–≤–∞–Ω–æ. –ù–∞–ø–∏—à–∏ /start, —â–æ–± –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å.", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == "üìù –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è")
def prompt_for_message(message):
    bot.send_message(message.chat.id, "‚úâÔ∏è –ù–∞–ø–∏—à–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (–º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ —Ñ–æ—Ç–æ –∞–±–æ –≤—ñ–¥–µ–æ).")
    waiting_for_message[message.chat.id] = True

@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    data = call.data.split('_')
    action = data[0]
    msg_id = int(data[1])
    user_id = int(data[2])

    if msg_id in pending_messages:
        entry = pending_messages.pop(msg_id)

        if action == "approve":
            if entry.get('media'):
                file_id = entry['media']
                caption = entry.get('text', '')
                send_func = getattr(bot, f"send_{entry['type']}")
                send_func(CHANNEL_ID, file_id, caption=caption)
            else:
                bot.send_message(CHANNEL_ID, entry['text'])
            bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)

        elif action == "delete":
            bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)

        elif action == "reply":
            bot.send_message(call.message.chat.id, "üí¨ –ù–∞–ø–∏—à–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:")
            waiting_for_message[call.message.chat.id] = ("reply", user_id)

@bot.message_handler(commands=['launch'])
def launch_post(message):
    if message.from_user.id != ADMIN_ID:
        return

    text = (
        "üöÄ Ctrl.Tap –æ—Ñ—ñ—Ü—ñ–π–Ω–æ —Å—Ç–∞—Ä—Ç—É—î!\n\n"
        "–¢—É—Ç –≤–∏ –∑–Ω–∞–π–¥–µ—Ç–µ –Ω–∞–π—Ü—ñ–∫–∞–≤—ñ—à—ñ –Ω–æ–≤–∏–Ω–∏, –¥—É–º–∫–∏, –º–µ–º–∏ —Ç–∞ –¥–æ—Ç–∏–∫–∏ –¥–æ —Å–≤—ñ—Ç—É —Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ–π —ñ –∂–∏—Ç—Ç—è.\n\n"
        "–î—è–∫—É—î–º–æ, —â–æ –∑ –Ω–∞–º–∏ ‚Äî –±—É–¥–µ –≥–∞—Ä—è—á–µ üî•\n"
        "–ü—ñ–¥–ø–∏—Å—É–π—Å—è, –∫–æ–º–µ–Ω—Ç—É–π, –Ω–∞–¥—Å–∏–ª–∞–π —Å–≤–æ—ó –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä—è–º–æ –≤ –±–æ—Ç–∞ ‚úâÔ∏è"
    )

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç–∏ –±–æ—Ç—É", url="https://t.me/CtrlTaps_Bot"))

    bot.send_message(CHANNEL_ID, text, reply_markup=markup)
    bot.send_message(message.chat.id, "‚úÖ –ü–æ—Å—Ç –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ.")

@bot.message_handler(content_types=['text', 'photo', 'video', 'document'])
def handle_user_input(message):
    user_id = message.from_user.id
    name = message.from_user.first_name or "–ë–µ–∑ —ñ–º–µ–Ω—ñ"

    if isinstance(waiting_for_message.get(user_id), tuple):
        mode, target_id = waiting_for_message[user_id]
        if mode == "reply":
            bot.send_message(target_id, f"üì¢ –í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {message.text}")
            bot.send_message(user_id, "‚úÖ –í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ.")
            waiting_for_message.pop(user_id)
        return

    if waiting_for_message.get(user_id):
        waiting_for_message.pop(user_id)

        if message.content_type == 'text':
            lowered = message.text.lower()
            if any(word in lowered for word in filter_words):
                bot.send_message(user_id, "‚õî –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –º—ñ—Å—Ç–∏—Ç—å –∑–∞–±–æ—Ä–æ–Ω–µ–Ω—ñ —Å–ª–æ–≤–∞.")
                return

        if user_id != ADMIN_ID:
            msg_id = message.message_id
            content = message.text if message.content_type == 'text' else '<–º—É–ª—å—Ç–∏–º–µ–¥—ñ–π–Ω–µ>'
            pending_messages[msg_id] = {
                'text': f"üì® –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ {name} (ID: {user_id}):{content}",
                'from_id': user_id
            }

            if message.content_type != 'text':
                if message.content_type == 'photo':
                    file_id = message.photo[-1].file_id
                else:
                    file_id = getattr(message, message.content_type).file_id
                pending_messages[msg_id]['media'] = file_id
                pending_messages[msg_id]['type'] = message.content_type

            markup = types.InlineKeyboardMarkup()
            markup.add(
                types.InlineKeyboardButton("‚úÖ –û–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏", callback_data=f"approve_{msg_id}_{user_id}"),
                types.InlineKeyboardButton("‚ùå –í–∏–¥–∞–ª–∏—Ç–∏", callback_data=f"delete_{msg_id}_{user_id}"),
                types.InlineKeyboardButton("üí¨ –í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏", callback_data=f"reply_{msg_id}_{user_id}")
            )

            if message.content_type == 'text':
                bot.send_message(ADMIN_ID, pending_messages[msg_id]['text'], reply_markup=markup)
            else:
                send_func = getattr(bot, f'send_{message.content_type}')
                send_func(ADMIN_ID, pending_messages[msg_id]['media'], caption=pending_messages[msg_id]['text'], reply_markup=markup)

            bot.send_message(user_id, "‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø–µ—Ä–µ–¥–∞–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É.")

        else:
            if message.content_type == 'text':
                if message.text.startswith('/'):
                    return
                bot.send_message(CHANNEL_ID, message.text)
            else:
                if message.content_type == 'photo':
                    file_id = message.photo[-1].file_id
                else:
                    file_id = getattr(message, message.content_type).file_id
                send_func = getattr(bot, f'send_{message.content_type}')
                send_func(CHANNEL_ID, file_id, caption=message.caption if message.caption else '')
            bot.send_message(user_id, "‚úÖ –û–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ –≤ –∫–∞–Ω–∞–ª—ñ.")

# –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Ç–∞ Flask
from flask import Flask

def run_bot():
    time.sleep(2)
    bot.polling(none_stop=True)

import threading
bot_thread = threading.Thread(target=run_bot)
bot_thread.start()

app = Flask(__name__)

@app.route('/')
def index():
    return 'Bot is running'

app.run(host="0.0.0.0", port=10000)
