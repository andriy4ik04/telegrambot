import os
import time
import telebot
from telebot import types
from flask import Flask, request
from dotenv import load_dotenv

load_dotenv()

TOKEN = os.environ['BOT_TOKEN']
CHANNEL_ID = -1002612055353
CHANNEL_USERNAME = "CtrlTap"  # –±–µ–∑ @
ADMIN_ID = 470240474

bot = telebot.TeleBot(TOKEN)
app = Flask(__name__)

waiting_for_message = {}
pending_messages = {}
first_users = set()  # –ó–±–µ—Ä—ñ–≥–∞—î ID –ø–µ—Ä—à–∏—Ö –ø—ñ–¥–ø–∏—Å–Ω–∏–∫—ñ–≤
FIRST_USERS_FILE = "first_users.txt"

# === –§—É–Ω–∫—Ü—ñ—ó ===

def is_subscribed(user_id):
    try:
        member = bot.get_chat_member(CHANNEL_ID, user_id)
        return member.status in ['member', 'administrator', 'creator']
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—ñ–¥–ø–∏—Å–∫–∏: {e}")
        return False

def save_first_user(user_id):
    if user_id not in first_users:
        first_users.add(user_id)
        with open(FIRST_USERS_FILE, "a") as file:
            file.write(str(user_id) + "\n")

def load_first_users():
    if os.path.exists(FIRST_USERS_FILE):
        with open(FIRST_USERS_FILE, "r") as file:
            for line in file:
                user_id = line.strip()
                if user_id.isdigit():
                    first_users.add(int(user_id))

load_first_users()

# === –ö–æ–º–∞–Ω–¥–∏ ===

@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row("‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è")
    markup.row("üîç –°—Ç–∞—Ç–∏ –ø–µ—Ä—à–∏–º")
    markup.row("‚òï –î–æ–Ω–∞—Ç", "‚ÑπÔ∏è –ü—Ä–æ –º–µ–Ω–µ")
    markup.row("üìÑ –î–æ–ø–æ–º–æ–≥–∞", "‚ùå –í–∏–π—Ç–∏")
    bot.send_message(
        message.chat.id,
        "üëã –í—ñ—Ç–∞—é! –°–∫–æ—Ä–∏—Å—Ç–∞–π—Å—è –∫–Ω–æ–ø–∫–∞–º–∏ –∞–±–æ –Ω–∞–¥—ñ—à–ª–∏ –º–µ–Ω—ñ —Å–≤–æ—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —ñ —è –ø–µ—Ä–µ–¥–∞–º –π–æ–≥–æ –∞–¥–º—ñ–Ω—É!",
        reply_markup=markup
    )

@bot.message_handler(commands=['first'])
def show_first_users(message):
    if message.from_user.id != ADMIN_ID:
        return
    if not first_users:
        bot.send_message(message.chat.id, "–°–ø–∏—Å–æ–∫ –ø–µ—Ä—à–∏—Ö –øi–¥–ø–∏—Å–Ω–∏–∫i–≤ –ø–æ—Ä–æ–∂–Ωi–π.")
    else:
        users = "\n".join([str(uid) for uid in sorted(first_users)])
        bot.send_message(message.chat.id, f"–°–ø–∏—Å–æ–∫ –ø–µ—Ä—à–∏—Ö –øi–¥–ø–∏—Å–Ω–∏–∫i–≤:\n{users}")

# === –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–æ–∫ ===

@bot.message_handler(func=lambda message: True, content_types=['text'])
def handle_text_buttons(message):
    text = message.text
    user_id = message.chat.id

    if text == "‚òï –î–æ–Ω–∞—Ç":
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏", url="https://send.monobank.ua/jar/7F8qg5rR9c"))
        bot.send_message(message.chat.id, "–î—è–∫—É—î–º–æ –∑–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫—É!", reply_markup=markup)

    elif text == "‚ÑπÔ∏è –ü—Ä–æ –º–µ–Ω–µ":
        bot.send_message(message.chat.id, "üìä Ctrl.Tap ‚Äî –∫–∞–Ω–∞–ª –Ω–æ–≤–∏–Ω, —Å–ø–æ—Ä—Ç—É, —Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ–π —Ç–∞ –≥–µ–π–º—ñ–Ω–≥—É. –ú–∏ –ø—É–±–ª—ñ–∫—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –Ω–∞–π—Ü—ñ–∫–∞–≤—ñ—à–µ!")

    elif text == "üìÑ –î–æ–ø–æ–º–æ–≥–∞":
        bot.send_message(message.chat.id, "ü§î –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –Ω–∞–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –∞ –º–∏ –ø–µ—Ä–µ–¥–∞–º–æ –π–æ–≥–æ –∞–¥–º—ñ–Ω—É. –í—ñ–Ω –≤–∏—Ä—ñ—à–∏—Ç—å, —á–∏ –æ–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏ –π–æ–≥–æ –≤ –∫–∞–Ω–∞–ª—ñ.")

    elif text == "‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è":
        bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏ —Å—é–¥–∏ —Å–≤–æ—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç–∞ –Ω–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ! –Ø –ø–µ—Ä–µ–¥–∞–º –π–æ–≥–æ –∞–¥–º—ñ–Ω—É.")

    elif text == "üîç –°—Ç–∞—Ç–∏ –ø–µ—Ä—à–∏–º":
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("‚úÖ –Ø –ø—ñ–¥–ø–∏—Å–∞–≤—Å—è", callback_data="check_sub"))
        markup.add(types.InlineKeyboardButton("üîó –ü–µ—Ä–µ–π—Ç–∏ –¥–æ –∫–∞–Ω–∞–ª—É", url=f"https://t.me/{CHANNEL_USERNAME}"))
        bot.send_message(message.chat.id, "–ü—ñ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª —Ç–∞ –Ω–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏:", reply_markup=markup)

    elif text == "‚ùå –í–∏–π—Ç–∏":
        bot.send_message(message.chat.id, "–í–∏ –≤–∏–π—à–ª–∏ –∑ –º–µ–Ω—é. –ù–∞–ø–∏—à—ñ—Ç—å /start, —â–æ–± –ø–æ—á–∞—Ç–∏ –∑–Ω–æ–≤—É.", reply_markup=types.ReplyKeyboardRemove())

    else:
        handle_user_message(message)

@bot.callback_query_handler(func=lambda call: call.data == "check_sub")
def check_subscription(call):
    user_id = call.from_user.id
    if is_subscribed(user_id):
        if user_id not in first_users:
            save_first_user(user_id)
            bot.send_message(user_id, "üéâ –í–∏ —Å—Ç–∞–ª–∏ –æ–¥–Ω–∏–º —ñ–∑ –ø–µ—Ä—à–∏—Ö –ø—ñ–¥–ø–∏—Å–Ω–∏–∫—ñ–≤!")
        else:
            bot.send_message(user_id, "üîÅ –í–∏ –≤–∂–µ –≤ —Å–ø–∏—Å–∫—É –ø–µ—Ä—à–∏—Ö –ø—ñ–¥–ø–∏—Å–Ω–∏–∫—ñ–≤.")
    else:
        bot.send_message(user_id, "‚ùó –©–æ–± —Å—Ç–∞—Ç–∏ –ø–µ—Ä—à–∏–º, –ø–æ—Ç—Ä—ñ–±–Ω–æ –±—É—Ç–∏ –ø—ñ–¥–ø–∏—Å–∞–Ω–∏–º –Ω–∞ –∫–∞–Ω–∞–ª!")

# === –û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ ===

@bot.message_handler(content_types=['text', 'photo', 'video', 'document', 'audio', 'voice'])
def handle_user_message(message):
    user_id = message.chat.id
    waiting_for_message[user_id] = message

    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton("‚úÖ –ù–∞–¥—ñ—Å–ª–∞—Ç–∏", callback_data="submit"),
        types.InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel")
    )
    bot.send_message(user_id, "–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è?", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data)
def callback_handler(call):
    user_id = call.from_user.id
    data = call.data

    if data == "submit":
        msg = waiting_for_message.get(user_id)
        if not msg:
            bot.answer_callback_query(call.id, "–ù–µ–º–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è")
            return

        name = msg.from_user.first_name or ""
        username = msg.from_user.username or ""
        pending_messages[msg.message_id] = (msg, user_id)

        caption = f"üì® –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ {name} (@{username} | ID: {user_id})"
        markup = types.InlineKeyboardMarkup()
        markup.add(
            types.InlineKeyboardButton("‚úÖ –û–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏", callback_data=f"approve:{msg.message_id}"),
            types.InlineKeyboardButton("‚ùå –í–∏–¥–∞–ª–∏—Ç–∏", callback_data=f"decline:{msg.message_id}"),
            types.InlineKeyboardButton("‚úâÔ∏è –í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏", callback_data=f"reply:{msg.message_id}")
        )

        if msg.content_type == "text":
            bot.send_message(ADMIN_ID, f"{caption}\n\n{msg.text}", reply_markup=markup)
        else:
            bot.copy_message(ADMIN_ID, msg.chat.id, msg.message_id, caption=caption, reply_markup=markup)

        bot.send_message(user_id, "‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É.")
        waiting_for_message.pop(user_id)

    elif data == "cancel":
        bot.send_message(user_id, "‚ùå –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
        waiting_for_message.pop(user_id, None)

    elif data.startswith("approve:"):
        msg_id = int(data.split(":")[1])
        msg, original_user = pending_messages.get(msg_id, (None, None))
        if msg:
            bot.copy_message(CHANNEL_ID, msg.chat.id, msg.message_id)
            bot.send_message(original_user, "‚úÖ –í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ.")
            pending_messages.pop(msg_id, None)
        else:
            bot.answer_callback_query(call.id, "–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

    elif data.startswith("decline:"):
        msg_id = int(data.split(":")[1])
        msg, original_user = pending_messages.get(msg_id, (None, None))
        if msg:
            bot.send_message(original_user, "‚ùå –í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ.")
            pending_messages.pop(msg_id, None)
        else:
            bot.answer_callback_query(call.id, "–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

    elif data.startswith("reply:"):
        msg_id = int(data.split(":")[1])
        msg, original_user = pending_messages.get(msg_id, (None, None))
        if msg:
            bot.send_message(user_id, "‚úâÔ∏è –ù–∞–ø–∏—à—ñ—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É:")
            bot.register_next_step_handler_by_chat_id(user_id, lambda m: reply_to_user(m, original_user))
            pending_messages.pop(msg_id, None)
        else:
            bot.answer_callback_query(call.id, "–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

def reply_to_user(message, user_id):
    bot.send_message(user_id, f"üì¢ –í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n{message.text}")
    bot.send_message(ADMIN_ID, "‚úÖ –í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞–¥—ñ—Å–ª–∞–Ω–∞.")

@app.route('/', methods=['GET'])
def index():
    return "‚úÖ –ë–æ—Ç –ø—Ä–∞—Ü—é—î", 200

@app.route('/webhook', methods=['POST'])
def webhook():
    update = telebot.types.Update.de_json(request.data.decode("utf-8"))
    bot.process_new_updates([update])
    return "OK", 200

if __name__ == "__main__":
    webhook_url = f"https://{os.environ['RENDER_EXTERNAL_HOSTNAME']}/webhook"
    bot.remove_webhook()
    time.sleep(1)
    bot.set_webhook(url=webhook_url, drop_pending_updates=True)
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))
