import os
import time
import telebot
from telebot import types
from flask import Flask, request
from dotenv import load_dotenv

load_dotenv()

TOKEN = os.environ['BOT_TOKEN']
CHANNEL_ID = -1002612055353  # –∑–∞–º—ñ–Ω–∏, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
ADMIN_ID = 470240474         # –∑–∞–º—ñ–Ω–∏, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ

bot = telebot.TeleBot(TOKEN)
app = Flask(__name__)

waiting_for_message = {}
pending_messages = {}

# === –û–ë–†–û–ë–ù–ò–ö–ò TELEGRAM ===

@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(message.chat.id, "üëã –ù–∞–¥—ñ—à–ª–∏ —Å–≤–æ—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —â–æ–± —è –ø–µ—Ä–µ–¥–∞–≤ –π–æ–≥–æ –∞–¥–º—ñ–Ω—É!")

@bot.message_handler(content_types=['text', 'photo', 'video', 'document', 'audio', 'voice'])
def handle_user_message(message):
    user_id = message.chat.id
    if user_id == ADMIN_ID:
        bot.send_message(user_id, "üîß –í–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä. –î–ª—è –≤–∞—Å –¥–æ—Å—Ç—É–ø–Ω—ñ —ñ–Ω—à—ñ —Ñ—É–Ω–∫—Ü—ñ—ó.")
        return

    waiting_for_message[user_id] = message

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("‚úÖ –ù–∞–¥—ñ—Å–ª–∞—Ç–∏", callback_data="submit"))
    markup.add(types.InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel"))

    bot.send_message(user_id, "–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è?", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data in ["submit", "cancel", "approve", "decline", "reply"])
def callback_handler(call):
    user_id = call.from_user.id
    data = call.data

    if data == "submit":
        msg = waiting_for_message.get(user_id)
        if not msg:
            bot.answer_callback_query(call.id, "–ù–µ–º–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è")
            return

        name = msg.from_user.first_name or ""
        username = msg.from_user.username or ""
        pending_messages[msg.message_id] = (msg, user_id)

        caption = f"üì® –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ {name} (@{username} | ID: {user_id})"

        markup = types.InlineKeyboardMarkup()
        markup.add(
            types.InlineKeyboardButton("‚úÖ –û–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏", callback_data=f"approve:{msg.message_id}"),
            types.InlineKeyboardButton("‚ùå –í–∏–¥–∞–ª–∏—Ç–∏", callback_data=f"decline:{msg.message_id}"),
            types.InlineKeyboardButton("‚úâÔ∏è –í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏", callback_data=f"reply:{msg.message_id}")
        )

        if msg.content_type == "text":
            bot.send_message(ADMIN_ID, f"{caption}\n\n{msg.text}", reply_markup=markup)
        else:
            bot.copy_message(ADMIN_ID, msg.chat.id, msg.message_id, caption=caption, reply_markup=markup)

        bot.send_message(user_id, "‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É.")
        waiting_for_message.pop(user_id)

    elif data == "cancel":
        bot.send_message(user_id, "‚ùå –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
        waiting_for_message.pop(user_id, None)

    elif data.startswith("approve:") or data.startswith("decline:") or data.startswith("reply:"):
        parts = data.split(":")
        action = parts[0]
        msg_id = int(parts[1])
        msg, original_user = pending_messages.get(msg_id, (None, None))

        if not msg:
            bot.answer_callback_query(call.id, "–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
            return

        if action == "approve":
            bot.copy_message(CHANNEL_ID, msg.chat.id, msg.message_id)
            bot.send_message(original_user, "‚úÖ –í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ.")
        elif action == "decline":
            bot.send_message(original_user, "‚ùå –í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ.")
        elif action == "reply":
            bot.send_message(user_id, "‚úâÔ∏è –ù–∞–ø–∏—à—ñ—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É:")
            bot.register_next_step_handler_by_chat_id(user_id, lambda m: reply_to_user(m, original_user))

        pending_messages.pop(msg_id, None)

def reply_to_user(message, user_id):
    bot.send_message(user_id, f"üì¢ –í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n{message.text}")
    bot.send_message(ADMIN_ID, "‚úÖ –í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞–¥—ñ—Å–ª–∞–Ω–∞.")

# === FLASK WEBHOOK ===

@app.route('/webhook', methods=['POST'])
def webhook():
    update = telebot.types.Update.de_json(request.data.decode("utf-8"))
    bot.process_new_updates([update])
    return "OK", 200

# === –ì–û–õ–û–í–ù–ò–ô –ó–ê–ü–£–°–ö ===

if __name__ == "__main__":
    webhook_url = f"https://{os.environ['RENDER_EXTERNAL_HOSTNAME']}/webhook"
    bot.remove_webhook()
    time.sleep(1)
    bot.set_webhook(url=webhook_url)
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))
